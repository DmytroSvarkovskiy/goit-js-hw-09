{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KAAYN,GACnBI,EAAQ,C,SAAEN,E,MAAUC,IACpBM,EACC,C,SAAEP,E,MAAUC,MAAWA,MARvBQ,SAASC,cAAc,SA8B7BC,iBAAiB,UAlBEC,IACpBA,EAAMC,iBACN,MAAMC,EAAYC,OAAON,SAASC,cAAc,iBAAiBM,OAC3DC,EAAaF,OAAON,SAASC,cAAc,kBAAkBM,OAC7DE,EAASH,OAAON,SAASC,cAAc,mBAAmBM,OAChE,IAAIG,EAAYF,EAEhB,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAEnCrB,EADgBqB,EAAE,EACMD,GAAWE,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MAClDqB,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAqBxB,QAAiBC,UAC7DwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOG,QAAQ,sBAAoB1B,QAAiBC,UAElEkB,GAAWL","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\nconst form=document.querySelector('.form')\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { if (shouldResolve) {\n          resolve({ position, delay });\n        } reject\n          ({ position, delay })}, delay)\n    }\n   )} \n \n  const onSubmitClick = event => {\n    event.preventDefault();\n    const stepValue = Number(document.querySelector('[name=\"step\"]').value);\n    const delayValue = Number(document.querySelector('[name=\"delay\"]').value);\n    const amount = Number(document.querySelector('[name=\"amount\"]').value)\n    let delayOver = delayValue;\n    \n    for (let i = 0; i < amount; i += 1) {\n    const position = i+1 ;\n     createPromise(position ,delayOver).then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n     })\n   ; delayOver+=stepValue;\n    }\n} \n  \nform.addEventListener('submit', onSubmitClick)\n\n\n\n\n\n\n\n// import Notiflix from 'notiflix';\n// const form=document.querySelector('.form')\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//     return new Promise((resolve, reject) => {\n//         if (shouldResolve) {\n//           resolve({ position, delay });\n//         } reject\n//           ({ position, delay });\n//     }\n//    )} \n \n//   const onSubmitClick = event => {\n//     event.preventDefault();\n//     const stepValue = Number(document.querySelector('[name=\"step\"]').value);\n//     const delay = Number(document.querySelector('[name=\"delay\"]').value);\n//     const amount = Number(document.querySelector('[name=\"amount\"]').value)\n//     let delayOver = delay;\n    \n//     for (let i = 0; i < amount; i += 1) {\n//     const position = i+1 ;\n//    setTimeout(() => { createPromise(position ,delay).then(({ position, delay }) => {\n//         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       }).catch(({ position, delay }) => {\n//           Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//      })\n//    }, delayOver); delayOver+= stepValue;\n//     }\n// } \n  \n// form.addEventListener('submit', onSubmitClick)"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","stepValue","Number","value","delayValue","amount","delayOver","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.8f2f8458.js.map"}